<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Smalljie的前端探索</title>
  
  <subtitle>網頁開發與前端技術的探索之旅</subtitle>
  <link href="https://smalljie373.github.io/smalljie.github.io/atom.xml" rel="self"/>
  
  <link href="https://smalljie373.github.io/smalljie.github.io/"/>
  <updated>2024-05-14T14:56:38.221Z</updated>
  <id>https://smalljie373.github.io/smalljie.github.io/</id>
  
  <author>
    <name>Smalljie</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>試著用Hexo架設Blog(1)-如何安裝</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Hexo/20240511/1977565266/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Hexo/20240511/1977565266/</id>
    <published>2024-05-11T08:50:00.000Z</published>
    <updated>2024-05-14T14:56:38.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇文章將向您介紹如何在兩種不同的作業系統中（Windows 和 macOS）安裝 Hexo。基本上，安裝過程在兩種系統上會稍有不同，但操作方法大致相同。</p><span id="more"></span><h2 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h2><p>在開始安裝Hexo之前，必須要在電腦上安裝下列工具:</p><h3 id="安裝需求"><a href="#安裝需求" class="headerlink" title="安裝需求"></a>安裝需求</h3><p><a href="https://nodejs.org/en/">Node.js</a>:在目錄時有介紹到 Hexo 是基於 Node.js 製作，因此 Node.js 就必須要安裝，點選連結進入到Node.js官方網站時，點選下載(download)，會發現有<code>LTS</code>與<code>Current</code>兩種版本可以下載。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/Hexo%2F2024051102%2Fimage01.png?alt=media&token=2ef5143e-f064-4db5-9b22-8cadb03cd601" alt="Node.js安裝"></p><p>稍微說明一下 <code>LTS</code>和<code>Current</code>的意思:</p><ul><li>LTS:中文是長期支援版 (Long-term support)，簡單來講就是當前且較穩定的版本。</li><li>Current:中文是當前版，簡單來講就是目前最新的版本。</li></ul><p>而我們在實際開發專案是會建議使用 LTS 版本即可，除非你有什麼特別想嘗試的新功能才會去安裝 Current。</p><p><a href="https://git-scm.com/">Git</a>:用來將檔案發布到 GitHub Page，關於Git的用法，之後會來特別介紹如何使用Git來進行所謂的版本控制。</p><p>點選連結進入到Git官方網站，點選下載(Downloads)，選擇目前所使用的作業系統（Windows 和 macOS），下載後並進行安裝。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/Hexo%2F2024051102%2Fimage02.png?alt=media&token=abd73e34-5b6a-451f-bc6f-1704784da1fd" alt="Git安裝"></p><h2 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝Hexo</h2><p>因為我本身是使用微軟的作業系統，所以往後的安裝與操作都會以使用Windows為主。</p><h3 id="Windows的安裝方式"><a href="#Windows的安裝方式" class="headerlink" title="Windows的安裝方式"></a>Windows的安裝方式</h3><p>準備開始安裝 Hexo 之前會建議你先執行以下指令，確定 Node.js 版本以及 npm 是否已經正確安裝(npm 會隨著 Node.js 安裝時一起安裝)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/Hexo%2F2024051102%2FwindowsImage01.png?alt=media&token=e788d56d-ca45-4c5e-870c-a9769436d847" alt="版本號碼"></p><p>如果都有跳出版本號，那麼就是成功安裝，接下來讓我們在終端機輸入以下指令開始安裝 Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>接下來在終端機上輸入以下指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/Hexo%2F2024051102%2FwindowsImage02.png?alt=media&token=53940561-4d4f-4bf3-923a-3fcfce12649c" alt="Hexo安裝成功"></p><p>恭喜你，當你出現上面的圖片的資訊，就代表你已經成功安裝 Hexo。</p><h3 id="Mac的安裝方式"><a href="#Mac的安裝方式" class="headerlink" title="Mac的安裝方式"></a>Mac的安裝方式</h3><p>而在Mac的安裝上其實並沒有太大的差異，你可以搜尋 「Terminal.app」 或是「終端機」也可以，將終端機打開</p><p>再開始安裝前，會建議你一樣先養成習慣確認一下自己目前電腦的 Node 版本以及是否安裝 npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure><p>接下來與前面Windows相同輸入以下指令安裝 Hexo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>基本上 Mac 在安裝時有可能會遇到一些問題，這一段問題在官方有說明，因此我這邊直接貼上官方說明</p><blockquote><p>在編譯時可能會碰到問題，請先至 App Store 安裝 Xcode，一旦 Xcode 安裝完成後，開啟它並前往 Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install 安裝命令列工具。</p></blockquote><p>通常如果你有安裝 Git 應該是不太會出現該錯誤訊息。</p><p>接下來在終端機上輸入以下指令:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>恭喜你，當你出現和Windows一樣的圖片資訊，就代表你已經成功安裝 Hexo。</p><p>安裝教學到此告一段落，恭喜您成功完成 Hexo 的安裝！現在您可以繼續進行下一個章節的內容。</p><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">如何使用 Hexo + GitHub Pages 架設個人網誌</a></li><li><a href="https://israynotarray.com/hexo/20200916/4257870076/">試著學 Hexo - 如何安裝 Hexo</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇文章將向您介紹如何在兩種不同的作業系統中（Windows 和 macOS）安裝 Hexo。基本上，安裝過程在兩種系統上會稍有不同，但操作方法大致相同。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://smalljie373.github.io/smalljie.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>試著用Hexo架設Blog(0)-目錄</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Hexo/20240509/1719717237/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Hexo/20240509/1719717237/</id>
    <published>2024-05-09T05:50:00.000Z</published>
    <updated>2024-05-14T14:56:18.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本系列文章旨在為那些想要開始架設自己部落格但卻不知從何著手的人提供指引。如果你對於如何開始使用 Hexo 有所困惑，這裡將為你提供一些合適的修改建議。</p><span id="more"></span><h2 id="什麼是-Hexo？"><a href="#什麼是-Hexo？" class="headerlink" title="什麼是 Hexo？"></a>什麼是 Hexo？</h2><p>Hexo 是一款是基於 Node.js 所製作的網誌框架，它以快速、簡單和強大著稱。通過 Markdown 或其他渲染引擎，Hexo 能夠將您的文本內容迅速轉換為靜態網頁，讓您輕鬆在網絡上分享內容。</p><h2 id="選擇-Hexo-的原因"><a href="#選擇-Hexo-的原因" class="headerlink" title="選擇 Hexo 的原因"></a>選擇 Hexo 的原因</h2><p>現今架設Blog的方法有上千種可行的做法。</p><p>馬上能聯想到的平台有Wordpress、Medium、Blogger 等等超多種不同的選擇，那麼為什麼要選擇Hexo架設Blog呢?</p><p>這邊稍微解釋一下，部落格平台提供了快速開始撰寫內容的便利，但也限制了使用者對於部落格的高度客製化。由於內容、SEO 設定以及版面風格等掌握在平台方手中，使用者可能會感到對於自己部落格的掌控不足。因此，儘管部落格平台提供了方便的主機、網域和 SEO 等解決方案，但這也意味著將自己的內容和品牌交由他人掌握。</p><h3 id="那麼使用-Hexo-有什麼好處呢？"><a href="#那麼使用-Hexo-有什麼好處呢？" class="headerlink" title="那麼使用 Hexo 有什麼好處呢？"></a>那麼使用 Hexo 有什麼好處呢？</h3><ul><li><p>快速建立： Hexo 是一個靜態網站生成器，它可以快速地將 Markdown 文件轉換為靜態網頁。這意味著你可以很快地建立起一個功能完整的部落格，而無需擔心後端伺服器的設置和管理。</p></li><li><p>簡單易用： Hexo 使用 Markdown 作為文章格式，這使得撰寫和管理文章變得非常簡單。此外，Hexo 還提供了豐富的主題和插件，可以輕鬆定製部落格的外觀和功能。</p></li><li><p>高度客製化： 儘管 Hexo 是一個靜態網站生成器，但它同樣也提供了許多客製化的選項。你可以根據自己的需求進行主題和佈局的設計，從而打造出獨一無二的部落格。</p><ul><li>但需掌握一定技術量。</li></ul></li><li><p>性能優異： 由於 Hexo 生成的是靜態網頁，因此它的性能非常優異。靜態網頁不需要伺服器端的處理，所以加載速度更快，且對於流量暴增的情況也更具響應能力。</p></li><li><p>版本控制： 由於 Hexo 使用 Markdown 來撰寫文章，這意味著你可以將文章儲存在版本控制系統中，如 Git。這使得文章的版本管理和協作變得更加方便和安全。</p></li></ul><h3 id="使用Hexo-架設的網站"><a href="#使用Hexo-架設的網站" class="headerlink" title="使用Hexo 架設的網站"></a>使用Hexo 架設的網站</h3><ul><li><a href="https://vuejs.org/">Vue.js</a></li><li><a href="https://ckeditor.com/">CKEditor</a></li><li><a href="https://www.hexschool.com/">六角學院</a></li></ul><p>好處講完了，那壞處呢?</p><ul><li><p>技術門檻： 對於不熟悉命令行界面或基本網頁開發技術的使用者來說，Hexo 的學習曲線可能較為陡峭。設置、安裝主題和插件等過程需要一定的技術知識和理解能力。</p></li><li><p>主題和插件的限制： 儘管 Hexo 提供了許多主題和插件，但與其他部落格平台相比，它的選擇相對較少。這可能會限制使用者對於部落格外觀和功能的客製化。</p></li><li><p>靜態網頁的限制： Hexo 生成的部落格是靜態網頁，這意味著它缺乏一些動態交互和即時更新的功能。例如，無法在部落格中實現使用者的評論系統或即時通知功能。</p></li><li><p>自助管理的需求： Hexo 是一個自助管理的部落格系統，使用者需要負責部落格的運行、更新和維護。這需要使用者有一定的技術能力和時間投入，不適合那些希望無需太多技術操作即可運行部落格的用戶。</p></li><li><p>可能需要額外的成本： 雖然 Hexo 本身是免費的開源軟件，但如果想要使用自己的網域、定製主題或添加高級功能，可能需要支付額外的成本，例如購買網域、主機服務或者付費主題和插件。</p></li></ul><p>以上是使用 Hexo 架設部落格的好處和壞處。雖然 Hexo 提供了快速建立、簡單易用以及高度客製化等優點，但也需要考慮到一些技術門檻、功能限制和自助管理的挑戰。儘管如此，我相信這些信息能夠幫助你更全面地了解 Hexo，如果你對於自己架設部落格感興趣，那就開始嘗試吧！</p><h2 id="文章大綱"><a href="#文章大綱" class="headerlink" title="文章大綱"></a>文章大綱</h2><ul><li><a href="https://smalljie373.github.io/smalljie.github.io/Hexo/20240511/1977565266/">試著用Hexo架設Blog(1)-如何安裝</a></li></ul><p>以上就是「嘗試使用 Hexo 架設部落格」系列文章的大綱。這些文章將涵蓋 Hexo 的基本介紹、架設步驟、主題和插件選擇、優化技巧等內容。透過這些文章，你將能夠全面了解如何使用 Hexo 架設自己的部落格，並獲得實用的技巧和建議。</p><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://hackmd.io/@Heidi-Liu/note-hexo-github">如何使用 Hexo + GitHub Pages 架設個人網誌</a></li><li><a href="https://israynotarray.com/hexo/20200914/3741834499/">試著學 Hexo</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本系列文章旨在為那些想要開始架設自己部落格但卻不知從何著手的人提供指引。如果你對於如何開始使用 Hexo 有所困惑，這裡將為你提供一些合適的修改建議。&lt;/p&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://smalljie373.github.io/smalljie.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心觀念(3)-執行環境與作用域-語法作用域</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Javascript/20240504/2694164006/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Javascript/20240504/2694164006/</id>
    <published>2024-05-04T11:30:00.000Z</published>
    <updated>2024-05-14T14:58:55.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>JavaScript 所採用的是語法作用域，也就是在宣告時就已經決定好他的作用域</p><span id="more"></span><h2 id="語法作用域"><a href="#語法作用域" class="headerlink" title="語法作用域"></a>語法作用域</h2><p>語法作用域是JavaScript中，很重要的一個觀念，當你在宣告語法時，就已經決定好他的作用域</p><p>那麼語法作用域是什麼呢?</p><p>所謂的語法作用域就是它實際存在的位置，例如所謂的全域環境及區域環境。</p><p>以下是區域環境的範例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;smalljie&#x27;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">lgo</span>(name);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name); <span class="comment">// name is not defined;</span></span><br></pre></td></tr></table></figure><p>當語法宣告的位置是在函式內，外部無法取得在函式內所宣告的變數</p><p>當然函式也會受到語法作用域的影響</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">name</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> name = <span class="string">&#x27;smalljie&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">name</span>() <span class="comment">// name is not defined;</span></span><br></pre></td></tr></table></figure><h2 id="作用域的種類"><a href="#作用域的種類" class="headerlink" title="作用域的種類"></a>作用域的種類</h2><p>講到作用域有分為兩種 :</p><ul><li>靜態作用域（lexical scope），變數的作用域解析時就已經確定，且不會再改變</li><li>動態作用域（dynamic scope），變數的作用域再呼叫、調用函式時才決定</li></ul><p>其中 JavaScript 就屬於靜態作用域，在語法單元化(Tokenizing)、解析時就已經決定作用域</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024050401%2Fimage.png?alt=media&token=dddf1804-dbcb-4c54-af4e-8540c184d342" alt="靜態作用域"></p><p>而動態作用域則是相反，動態作用域只有在函式呼叫的時候才會決定它的作用域</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024050401%2Fimage02.png?alt=media&token=d5a8429a-54af-47fc-b926-9b9bd9fe2a50" alt="重點整理"></p><p>採用靜態作用域的程式語言有</p><ul><li>JavaScript</li><li>C&#x2F;C++</li><li>Python</li><li>C#</li><li>Java …</li></ul><p>相反的，採用動態作用域的程式語言有</p><ul><li>Pascal</li><li>Emacs Lisp …</li></ul><p>由此可知JavaScript是採用靜態作用域，以下是範例程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>; <span class="comment">// 全域變數</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnA</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value); <span class="comment">// 1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fnB</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="number">2</span>; <span class="comment">// 區域變數</span></span><br><span class="line">    <span class="title function_">fnA</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">fnB</span>(); </span><br></pre></td></tr></table></figure><p>在前面有講到當程式碼運行時，就已經決定了程式碼的作用域，所以在<code>fnB</code>中的<code>value = 2</code>就只會存活在<code>fnB</code>裡，而<code>var value = 1</code>是宣告在最外圍的全域變數，所以在<code>fnA()</code>才會出現<code>1</code>這個結果，另外還有一個重要的點，當「當前作用域沒有這個變數時 JavaScript 將會一層一層向外查找」，而這就是所謂的範圍鍊，這個觀念後面再提</p><h3 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h3><ul><li>靜態作用域（lexical scope），變數的作用域解析時就已經確定，且不會再改變</li><li>動態作用域（dynamic scope），變數的作用域再呼叫、調用函式時才決定</li><li>當前作用域沒有這個變數時 JavaScript 將會一層一層向外查找</li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇</a></li><li><a href="https://hackmd.io/@Co-E5uCjTiSXhCaEXduquA/SJDwemE85">語法作用域(Lexical scope)</a></li><li><a href="https://israynotarray.com/javascript/20200412/2694164006/">執行環境與作用域-語法作用域</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;JavaScript 所採用的是語法作用域，也就是在宣告時就已經決定好他的作用域&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Javascript/"/>
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心觀念(2)-執行環境與作用域-執行的錯誤情境LHS與RHS</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Javascript/20240428/1393512069/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Javascript/20240428/1393512069/</id>
    <published>2024-04-28T13:05:00.000Z</published>
    <updated>2024-05-14T14:58:31.611Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此篇章是要來介紹在JavaScript中會出現的LHS, RHS，這兩個名詞主要與取值及賦值有關。</p><span id="more"></span><h2 id="LHS"><a href="#LHS" class="headerlink" title="LHS"></a>LHS</h2><p>LHS，全名為Left-Hand Side</p><p>Left-Hand Side的意思是用來<code>賦予值</code>到左側的變數上，如範例<br><code>var name = &#39;smalljie&#39;</code>，將字串賦予到變數<code>name</code>上。</p><p>那什麼時候會發生LHS錯誤，簡單來說，當你賦予的值是JavaScript不正確時就會發生，例如以下字串賦予值的作法就會引發錯誤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;smalljie&#x27;</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>您只需要在瀏覽器的Console頁面輸入上述錯誤的程式碼，便會出現<code>SyntaxError: invalid assignment left-hand side debugger eval code:1</code></p><p>使用前一篇所提到的<a href="https://esprima.org/demo/parse.html">esprima</a>，輸入錯誤的程式碼也會出現相關的錯誤訊息</p><p>在這邊還要分享一個特殊狀況，請看以下範例程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="string">&#x27;smalljie&#x27;</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>如果透過變數宣告的方式賦值，在瀏覽器上你可能不會看到 Left-Hand side 的錯誤訊息</p><p>在Chrome瀏覽器上輸入會出現<code>Uncaught SyntaxError: Unexpected string</code></p><p>而在Firefox上輸入則會出現<code>SyntaxError: missing variable name</code></p><p>兩者提示問題的差異在於瀏覽器提供的執行環境提示訊息的不同，由此我們可以知道執行環境是很重要的觀念。</p><h2 id="RHS"><a href="#RHS" class="headerlink" title="RHS"></a>RHS</h2><p>RHS，全名為Right-Hand Side</p><p>Right-Hand Side的意思是<code>取值</code>來自於右側的變數上，如以下範例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;smalljie&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br></pre></td></tr></table></figure><p>在這邊我們可以看到<code>console.log()</code>去取得右側的變數 name，並顯示在<code>devTools</code>上</p><p>換另外一種角度看上述的程式碼，會發現到一開始會先 LHS 賦予值，後續到了<code>console.log()</code>時會去查詢、引用<code>name</code>的值並顯示出來</p><p>那什麼時候會發生RHS錯誤呢?</p><p>RHS的錯誤訊息相較於LHS會有稍微的不同，因為RHS並不會直接顯示出 RHS 的錯誤，他只會出現類似<code>ReferenceError: name is not defined</code>這種的錯誤訊息。</p><p>當然在不同瀏覽器上的錯誤訊息也會有一點點小小差異</p><p>基本上如果有遇到上面的任何錯誤，都會建議一定要修正，否則程式碼是無法正常運作的，因為 JavaScript 一旦遇到錯誤就無法往後執行</p><h3 id="章節重點"><a href="#章節重點" class="headerlink" title="章節重點"></a>章節重點</h3><ul><li>Left-Hand Side(LHS)是用來<code>賦予值</code>到左側的變數上</li><li>Right-Hand Side(RHS)是<code>取值</code>來自於右側的變數上</li><li>錯誤訊息會因不同的瀏覽器而有些微的差異</li><li>JavaScript一旦遇到錯誤就無法往後執行，如果有遇到上面的任何錯誤，都會建議一定要修正</li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇</a></li><li><a href="https://gene-toys.medium.com/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98-javascript-lhs-%E8%88%87-rhs-7385f6fd47fc">前端筆記 - JavaScript — LHS 與 RHS</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此篇章是要來介紹在JavaScript中會出現的LHS, RHS，這兩個名詞主要與取值及賦值有關。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Javascript/"/>
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心觀念(1)-執行環境與作用域-JavaScript運作方式</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Javascript/20240422/4291132673/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Javascript/20240422/4291132673/</id>
    <published>2024-04-22T13:25:00.000Z</published>
    <updated>2024-05-14T14:58:14.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一篇文章主要是來介紹JavaScript的運作方式</p><span id="more"></span><h2 id="JavaScript的運作方式"><a href="#JavaScript的運作方式" class="headerlink" title="JavaScript的運作方式"></a>JavaScript的運作方式</h2><p>首先我們所撰寫JS程式碼，是沒有辦法直接被瀏覽器或電腦執行，需要透過轉譯器，將我們所撰寫的程式邏輯指令轉換成電腦看得懂的語言</p><p>舉個例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;smalljie&#x27;</span></span><br></pre></td></tr></table></figure><p>上述的程式需要被轉譯器轉譯後才能在電腦執行</p><h2 id="直譯語言-Interperted-language"><a href="#直譯語言-Interperted-language" class="headerlink" title="直譯語言 Interperted language"></a>直譯語言 Interperted language</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F01.png?alt=media&token=f16d58e3-1e98-4a62-982b-1149eeabc788" alt="直譯語言"></p><p>什麼是直譯語言? 這種類型的程式語言，會將程式碼一句一句直接執行，不像編譯語言一樣，需要經過編譯器先行編譯成機器碼，也就是翻譯成電腦看得懂的語言</p><p>直譯式語言的好處在於開發速度是比較快速且較彈性的，舉例來講 JavaScript 中我們可以不用預先定義型別，而是透過直譯器來動態辨別型別。</p><p>常見的代表性語言有</p><ul><li>Python</li><li>JavaScript</li><li>Ruby 等…</li></ul><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F03.png?alt=media&token=de7a4105-b1c7-4cb3-ae62-90b07a77a58e" alt="直譯式語言"></p><p>另外一種是編譯式語言，與上述的介紹一樣，需要透過編譯器進行編譯才能使用，直譯式語言與編譯式語言最明顯的差異在於直譯式語言必須先一條一條將程式碼讀取出來並透過直譯器轉換成機器碼才能夠被運作，所以通常來講直譯式語言的錯誤訊息都是直接呈現於開發環境上</p><p>編譯式語言最大特色在於，在我們撰寫程式碼的同時，他已經在預先編譯，所以當遇到問題時我們就可以預先除錯，那麼這就是編譯式語言的好處，通常來講效能也會比較好。</p><p>可是編譯式語言的壞處在於，你在開發時彈性會比較小且通常開發的速度以及 Debug 的時間是比直譯式語言較長</p><p>常見的代表性語言有</p><ul><li>C++</li><li>C#</li><li>Java 等..</li></ul><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F02.png?alt=media&token=995316bb-5ecf-4acc-8c4c-acf8f47a6005" alt="編譯式語言"></p><h2 id="JavaScript-直譯器轉換過程"><a href="#JavaScript-直譯器轉換過程" class="headerlink" title="JavaScript 直譯器轉換過程"></a>JavaScript 直譯器轉換過程</h2><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F04.png?alt=media&token=14ed22fb-b8c3-4bbd-88e8-cdabf3b97a3d" alt="直譯器轉換過程"></p><p>先前有介紹過直譯式語言會依序一條一條將程式碼讀取出來並透過直譯器轉換成機器碼，而JavaScript在運行時會一個一個字去分析並解析出相對應的機器碼</p><p>舉個例子:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;smalljie&#x27;</span></span><br></pre></td></tr></table></figure><p>當輸入上述程式碼時會先將所有的字詞，一個一個解析出來，比如先解析var，後解析name，其中標點符號也算字詞，這個步驟稱為語法基本單元化(Tokenizing)，所以由此可知直譯器是會逐行逐字的去分析。</p><p>接下來語法基本單元化解析完畢後，會進入到抽象結構樹AST(Abstract Syntax Tree)，來將整個程式碼定義完成，最後定義完成後會將程式碼轉換成機器碼</p><p>上述過程可以使用一個<a href="https://esprima.org/demo/parse.html">Esprima</a>這個小工具來了解何謂語法基本單位化及抽象結構樹。</p><p>首先我們可以先在 Esprima 輸入以下程式碼</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>點選介面中Token分頁標籤，我們可以看到程式碼被一一分析成類似物件的結構，這就是所謂的語法基本單位化(Tokenizing)。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F05.png?alt=media&token=88aa903c-7f30-4ed9-902c-1729ac38b81d" alt="語法基本單元化"></p><p>點選後會看到type有以下這些選項</p><ul><li>Keyword (關鍵字)</li><li>Identifier (標識符，又稱為識別碼)</li><li>Punctuator (符號)</li><li>String、Number (型別)</li></ul><p>在此要注意一件是，在語法基本單位化這個步驟時，他還不知道 <code>function</code> 是宣告一個函式，只是先將字詞解析出來而已。</p><p>勾選下方「Index-based range」及「Line and column-based」能夠看到相關的索引及行數。</p><p><img src="https://firebasestorage.googleapis.com/v0/b/smalljieblog.appspot.com/o/JS%2F2024042201%2F06.png?alt=media&token=69c1bcbf-385e-4cc6-8cea-30a4786e8260" alt="抽象結構樹"></p><p>接著會進入到Tree的階段，過程中我們可以了解到 JavaScript 的直譯器，是在 Tree 的階段才開始正式的了解每一個字詞的意義，例如會看到<code>function</code>被宣告成函式，但是這邊 JavaScript 並還沒有開始真正的執行，只是了解他的字詞而已，真正的執行是在代碼生成的時候，但每一個執行環境的不同，所以執行的結果就會跟著不同。</p><p>這邊主要的重點在於<code>抽象結構樹 AST(Abstract Syntax Tree)</code>這個階段時，程式碼是還沒有被運行的，實際運行是在代碼生成的時候。</p><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E7%9B%B4%E8%AD%AF%E8%AA%9E%E8%A8%80">直譯式語言</a></li><li><a href="https://zh.wikipedia.org/zh-tw/%E7%B7%A8%E8%AD%AF%E8%AA%9E%E8%A8%80">編譯式語言</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;第一篇文章主要是來介紹JavaScript的運作方式&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Javascript/"/>
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 核心觀念(0)-目錄</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/Javascript/20240422/2405094525/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/Javascript/20240422/2405094525/</id>
    <published>2024-04-22T09:32:14.000Z</published>
    <updated>2024-05-14T14:57:09.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>此系列文章是基於六角學院的線上影音課程而去做填寫的，來介紹有關於JavaScript運作與其核心部分，其實只是怕腦袋裝太多記不住，所以需要將相關知識透過文章的方式進行留存。</p><span id="more"></span><h2 id="影音課程"><a href="#影音課程" class="headerlink" title="影音課程"></a>影音課程</h2><p>系列文章主要是觀看六角學院的線上影音課程<a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇</a>，如果您是有碰過JavaScript，但不瞭解其運作方式或者想加深自己對JavaScript的基礎，那麼推薦您去上這門課。</p><p>另外此線上課程影音也非常歡迎同學將該內容寫成文章，寫成文章的好處，除了可以將自己所學的知識加深理解外，往後如果需要相關的知識也可以快速查找。</p><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><h3 id="執行環境與作用域"><a href="#執行環境與作用域" class="headerlink" title="執行環境與作用域"></a>執行環境與作用域</h3><ul><li><a href="https://smalljie373.github.io/smalljie.github.io/JavaScript/20240422/4291132673/">JavaScript 核心觀念(1)-執行環境與作用域-JavaScript運作方式</a></li><li><a href="https://smalljie373.github.io/smalljie.github.io/JavaScript/20240428/1393512069/">JavaScript 核心觀念(2)-執行環境與作用域-執行的錯誤情境LHS與RHS</a></li><li><a href="https://smalljie373.github.io/smalljie.github.io/JavaScript/20240504/2694164006/">JavaScript 核心觀念(3)-執行環境與作用域-語法作用域</a></li></ul><h2 id="參考文獻"><a href="#參考文獻" class="headerlink" title="參考文獻"></a>參考文獻</h2><ul><li><a href="https://www.hexschool.com/courses/js-core.html">JavaScript 核心篇</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;此系列文章是基於六角學院的線上影音課程而去做填寫的，來介紹有關於JavaScript運作與其核心部分，其實只是怕腦袋裝太多記不住，所以需要將相關知識透過文章的方式進行留存。&lt;/p&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/categories/Javascript/"/>
    
    
    <category term="JavaScript" scheme="https://smalljie373.github.io/smalljie.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 基礎與入門教學</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/miscellaneous/20240406/482737823/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/miscellaneous/20240406/482737823/</id>
    <published>2024-04-06T06:19:57.000Z</published>
    <updated>2024-05-12T02:53:42.945Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>該文章會集中介紹 Markdown 常見標籤，同時也是記錄自己學習 Markdown 標籤的紀錄</p><span id="more"></span><h2 id="標題"><a href="#標題" class="headerlink" title="標題"></a>標題</h2><p>標題的標籤是採用井字號作為開頭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># This is an H1</span><br><span class="line">## This is an H2</span><br><span class="line">### This is an H3</span><br><span class="line">#### This is an H4</span><br><span class="line">##### This is an H5</span><br><span class="line">###### This is an H6</span><br></pre></td></tr></table></figure><p>此標籤會生成<code>&lt;h1&gt;~&lt;/h6&gt;</code>的標籤</p><h2 id="粗體"><a href="#粗體" class="headerlink" title="粗體"></a>粗體</h2><p>文字粗體只需要使用兩個米字號並包覆該文字即可達到。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我是 **smalljie** 我是粗體</span><br></pre></td></tr></table></figure><p>我是 <strong>smalljie</strong> 我是粗體</p><p>該標籤會生成<code>&lt;strong&gt;</code>標籤</p><h2 id="斜體"><a href="#斜體" class="headerlink" title="斜體"></a>斜體</h2><p>要將文字斜體只需要一個*前後包覆</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello *World*</span><br></pre></td></tr></table></figure><p>Hello <em>World</em></p><h2 id="刪除線"><a href="#刪除線" class="headerlink" title="刪除線"></a>刪除線</h2><p>文字刪除線是使用前後兩個波浪符來達到該需求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">今天~~來解JS的BUG~~</span><br></pre></td></tr></table></figure><p>範例: 今天<del>來解 JS 的 BUG</del></p><p>此標籤會生成<code>&lt;s&gt;標籤</code></p><h2 id="分隔線"><a href="#分隔線" class="headerlink" title="分隔線"></a>分隔線</h2><p>分隔線有分為兩種</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. ***</span><br><span class="line">2. ---</span><br></pre></td></tr></table></figure><p>一般來說最常使用的是使用減號取代星號，最主要是閱讀上問題。</p><p>範例:</p><hr><hr><p>分隔線會生成<code>&lt;hr&gt;</code>標籤</p><h2 id="插入連結"><a href="#插入連結" class="headerlink" title="插入連結"></a>插入連結</h2><p>連結插入方式有兩種</p><h2 id="常見插入方式"><a href="#常見插入方式" class="headerlink" title="常見插入方式"></a>常見插入方式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[連結名稱](超連結)</span><br></pre></td></tr></table></figure><p>範例: <a href="https://www.google.com/">Google</a></p><h2 id="快速連結"><a href="#快速連結" class="headerlink" title="快速連結"></a>快速連結</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;https://www.google.com/&gt;</span><br></pre></td></tr></table></figure><p>範例: <a href="https://www.google.com/">https://www.google.com/</a></p><p>以上兩種方式皆會產生 <code>&lt;a&gt;</code> 連結標籤。</p><h2 id="項目清單"><a href="#項目清單" class="headerlink" title="項目清單"></a>項目清單</h2><p>項目清單分為兩大類</p><ol><li>無序清單</li><li>有序清單</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. *</span><br><span class="line">2. +</span><br><span class="line">3. -</span><br><span class="line">4. 1. ...2.</span><br></pre></td></tr></table></figure><h3 id="無序清單"><a href="#無序清單" class="headerlink" title="無序清單"></a>無序清單</h3><p>以下是無序清單的範例</p><h4 id="減號"><a href="#減號" class="headerlink" title="減號"></a>減號</h4><ul><li>這是減號的效果</li><li>測試這是減號的效果</li></ul><h4 id="星號"><a href="#星號" class="headerlink" title="星號"></a>星號</h4><ul><li>這是星號的效果</li><li>測試這是星號的效果</li></ul><h4 id="加號"><a href="#加號" class="headerlink" title="加號"></a>加號</h4><ul><li>這是加號的效果</li><li>測試這是加號的效果</li></ul><p>以上三種會產生 <code>&lt;ul&gt; &gt; &lt;li&gt;</code> 標籤。</p><h3 id="有序清單"><a href="#有序清單" class="headerlink" title="有序清單"></a>有序清單</h3><h4 id="數字清單"><a href="#數字清單" class="headerlink" title="數字清單"></a>數字清單</h4><ol><li>測試</li><li>這是測試的一句話</li></ol><p>數字清單會產生 <code>&lt;ol&gt; &gt; &lt;li&gt;</code> 標籤。</p><h2 id="引用標籤"><a href="#引用標籤" class="headerlink" title="引用標籤"></a>引用標籤</h2><p>此標籤在使用時需多加注意，其主要原因是該標籤會生成 blockquote，在 SEO 代表著引用的意思。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 引用一句話</span><br></pre></td></tr></table></figure><p>範例:</p><blockquote><p>引用一句話</p></blockquote><h2 id="圖片"><a href="#圖片" class="headerlink" title="圖片"></a>圖片</h2><p>圖片的操作方式與連結雷同，但只需要前面加入一個驚嘆號就可以使用了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![圖片名稱](圖片連結)</span><br></pre></td></tr></table></figure><p>此語法會產生<code>&lt;img&gt;</code>標籤</p><h2 id="勾選"><a href="#勾選" class="headerlink" title="勾選"></a>勾選</h2><p>勾選欄位，勾選欄位最常出現於代辦事項。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 今天睡覺</span><br><span class="line">- [x] 今天還沒睡覺</span><br></pre></td></tr></table></figure><p>範例:</p><ul><li><input disabled="" type="checkbox"> 寫文章</li><li><input checked="" disabled="" type="checkbox"> 不寫文章</li></ul><p>該格式會產生 <code>&lt;ul&gt; &gt; &lt;li&gt;</code> 且會透過 JavaScript 監聽操作，該標籤不一定適用於每個網站。</p><h2 id="程式碼片段"><a href="#程式碼片段" class="headerlink" title="程式碼片段"></a>程式碼片段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`let a = 10;。`</span><br></pre></td></tr></table></figure><p><code>let a = 10;。</code></p><p>用來顯示程式碼的片段</p><h2 id="程式碼區塊"><a href="#程式碼區塊" class="headerlink" title="程式碼區塊"></a>程式碼區塊</h2><p>程式碼區塊使用的則是上下三個反引號包覆。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let a = 10;</span><br><span class="line">a++;</span><br></pre></td></tr></table></figure><p>程式碼相關標籤都會產生<code> &lt;pre&gt; &gt; &lt;code&gt;</code> 標籤</p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>arkdown 也有支援表格撰寫，不過在此建議使用第三方生成工具，因為 Markdown 表格較難撰寫。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|   標題1  | 標題2 |</span><br><span class="line">|:-----------:|:----------:|</span><br><span class="line">| 好 | 不好 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="center">標題 1</th><th align="center">標題 2</th></tr></thead><tbody><tr><td align="center">好</td><td align="center">不好</td></tr></tbody></table><p>表格將會生成 table 標籤。</p><p>MD 表格第三方產生器</p><ol><li><a href="https://www.tablesgenerator.com/markdown_tables">Markdown Tables generator</a></li><li><a href="https://tableconvert.com/">tableconvert</a></li></ol><h2 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h2><p>以下為常見撰寫 Markdown 的問題</p><ul><li>標題與段落之間沒使用一個 Enter 斷行。</li><li>程式碼片段沒使用一個 Enter 斷行。</li><li>程式碼片段沒有寫入高亮語言。</li><li>標體寫入了標點符號，在規範中標題是不宜寫入標點符號。</li><li>段落與段落之間採用一個 Enter 取代兩個空白鍵。</li><li>文章結尾缺少一個 Enter。</li><li>大多文章標題就是 <code>&lt;h1&gt;(ex: Hexo)</code>，所以會建議從 <code>&lt;h2&gt;</code> 開始使用撰寫</li></ul><h2 id="參考文章"><a href="#參考文章" class="headerlink" title="參考文章"></a>參考文章</h2><p><a href="https://israynotarray.com/other/20191111/1875438261/">Markdown 基礎與入門教學手冊</a></p><p><a href="https://www.happycoder.org/2019/12/11/[%E6%96%B0%E6%89%8B%E6%9D%91%E7%B3%BB%E5%88%97]-markdown-html-%E5%9F%BA%E7%A4%8E%E8%AA%9E%E6%B3%95%E6%95%99%E5%AD%B8/">Markdown 和 HTML 基礎語法教學</a></p><p><a href="https://markdown.tw/">Markdown</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;該文章會集中介紹 Markdown 常見標籤，同時也是記錄自己學習 Markdown 標籤的紀錄&lt;/p&gt;</summary>
    
    
    
    <category term="雜談" scheme="https://smalljie373.github.io/smalljie.github.io/categories/miscellaneous/"/>
    
    
    <category term="Markdown" scheme="https://smalljie373.github.io/smalljie.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇部落格文章</title>
    <link href="https://smalljie373.github.io/smalljie.github.io/miscellaneous/20240101/2197251373/"/>
    <id>https://smalljie373.github.io/smalljie.github.io/miscellaneous/20240101/2197251373/</id>
    <published>2024-01-01T09:32:14.000Z</published>
    <updated>2024-05-12T02:53:42.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2024元旦年初的第一篇文章"><a href="#2024元旦年初的第一篇文章" class="headerlink" title="2024元旦年初的第一篇文章"></a>2024元旦年初的第一篇文章</h2><p>作為2024年初的第一篇文章，老實說有點緊張，不過這裡還是慶祝一下，屬於自己的前端技術部落格，要開始發佈技術文章了，老實說其實是怕自己遺忘所學的技術或技巧，強迫自己如果有學到新知識，要想辦法化作技術文章，來記錄自己的所學。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2024元旦年初的第一篇文章&quot;&gt;&lt;a href=&quot;#2024元旦年初的第一篇文章&quot; class=&quot;headerlink&quot; title=&quot;2024元旦年初的第一篇文章&quot;&gt;&lt;/a&gt;2024元旦年初的第一篇文章&lt;/h2&gt;&lt;p&gt;作為2024年初的第一篇文章，老實說有點緊張</summary>
      
    
    
    
    <category term="雜談" scheme="https://smalljie373.github.io/smalljie.github.io/categories/miscellaneous/"/>
    
    
    <category term="雜談" scheme="https://smalljie373.github.io/smalljie.github.io/tags/%E9%9B%9C%E8%AB%87/"/>
    
  </entry>
  
</feed>
